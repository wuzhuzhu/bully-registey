// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["jsonProtocol"]
}

// see https://github.com/chrishoermann/zod-prisma-types
generator zod {
  provider                         = "zod-prisma-types"
  // useMultipleFiles                 = true
  // createRelationValuesTypes        = true // default is false
  // createInputTypes                 = fales
  createOptionalDefaultValuesTypes = true
  useMultipleFiles                 = false
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Registration  Registration[]
  Profile       Profile?
  Pet           Pet[]
}

// 犬舍
model Kennel {
  id          String   @id @default(cuid())
  /// @zod.string.min(2).max(12)
  name        String
  nameEn      String?
  pets        Pet[]
  Profile     Profile?
  imgUrl      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Profile {
  id        String  @id @default(cuid())
  instagram String?
  facebook  String?
  wechat    String?
  mobile    String?
  user      User?   @relation(fields: [userId], references: [id])
  userId    String? @unique
  kennel    Kennel? @relation(fields: [kennelId], references: [id])
  kennelId  String? @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PetType {
  CAT
  DOG
}

enum Gender {
  MALE
  FEMALE
}

// 这里需要注意 child代表的其实是parents
// Warning: the childs here are actually parents
// use this extension to express tree structure on prisma: 
// https://prisma-extension-bark.gitbook.io/docs/client-extension-api-reference
model Pet {
  id String @id @default(cuid())

  name           String
  nameEn         String?
  ownerName      String
  type           PetType       @default(DOG)
  gender         Gender
  birthDate      DateTime
  breed          String?
  color          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      User          @relation(fields: [createdById], references: [id])
  createdById    String
  registration   Registration? @relation(fields: [registrationId], references: [id])
  registrationId String?       @unique
  kennel         Kennel?       @relation(fields: [kennelId], references: [id])
  kennelId       String?
  parents        Pet[]         @relation("birth") // child post (post that are suggested)
  children       Pet[]         @relation("birth") // parent post (parent post of a suggested post)
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model Registration {
  id           String             @id @default(cuid())
  readableId   String             @unique
  status       RegistrationStatus @default(PENDING)
  registeredAt DateTime           @default(now())
  registerEnd  DateTime?
  reviewedAt   DateTime?
  reviewedBy   User?              @relation(fields: [reviewedById], references: [id])
  reviewedById String?
  attachments  String? // 可以存储文件路径或其他相关信息
  pet          Pet?
}
